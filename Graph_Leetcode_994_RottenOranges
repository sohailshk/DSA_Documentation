class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
       int n = grid.size();
       int m = grid[0].size();

       queue<pair<pair<int,int>,int>>q;
       vector<vector<int>> vis(n, vector<int>(m, 0));

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }

            }
        }
        int tm = 0;
        int distrow[]={-1,0,1,0};
        int distcol[] = {0,1,0,-1};

        
        while(!q.empty()){
            int row = q.front().first.first;
            int col = q.front().first.second;
            int t = q.front().second;
            q.pop();

            tm=max(tm,t);

            for(int i=0;i<4;i++){
            int valrow = row + distrow[i];
            int valcol=  col + distcol[i];

            if(valrow>=0 && valrow<n && valcol >=0 && valcol<m &&  vis[valrow][valcol]!=2 && grid[valrow][valcol]==1){
                q.push({{valrow,valcol},t+1});
                vis[valrow][valcol]=2;
                    }
                }

        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==1 && vis[i][j]!=2){
                    return -1;
                } 
            }

        }
        return tm;

    }
};
